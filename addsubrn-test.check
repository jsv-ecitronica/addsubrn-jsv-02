#include "addsubrn.h"

#test validate_rn
   //check syntax
   fail_unless(ValidateRoman("") == SYNTAX_ERROR_ROMAN, "Empty roman numeral.");
   //
	fail_unless(ValidateRoman("IIII") == MORE_THAN_THREE_IXCM_ROMAN, "The roman numeral can not contain more than three consecutive symbols: I, X, C or M");
   fail_unless(ValidateRoman("XXXX") == MORE_THAN_THREE_IXCM_ROMAN, "The roman numeral can not contain more than three consecutive symbols: I, X, C or M");
   fail_unless(ValidateRoman("CCCC") == MORE_THAN_THREE_IXCM_ROMAN, "The roman numeral can not contain more than three consecutive symbols: I, X, C or M");
   fail_unless(ValidateRoman("MMMM") == MORE_THAN_THREE_IXCM_ROMAN, "The roman numeral can not contain more than three consecutive symbols: I, X, C or M");
   fail_unless(ValidateRoman("VIIII") == MORE_THAN_THREE_IXCM_ROMAN, "The roman numeral can not contain more than three consecutive symbols: I, X, C or M");
   fail_unless(ValidateRoman("CXXXX") == MORE_THAN_THREE_IXCM_ROMAN, "The roman numeral can not contain more than three consecutive symbols: I, X, C or M");
   fail_unless(ValidateRoman("DCCCC") == MORE_THAN_THREE_IXCM_ROMAN, "The roman numeral can not contain more than three consecutive symbols: I, X, C or M");
   fail_unless(ValidateRoman("MMMMD") == MORE_THAN_THREE_IXCM_ROMAN, "The roman numeral can not contain more than three consecutive symbols: I, X, C or M");
   //   
   fail_unless(ValidateRoman("VV") == MORE_THAN_ONE_VLD_ROMAN, "The roman numeral can not contain more than two consecutive symbols: V, L or D");
   fail_unless(ValidateRoman("LL") == MORE_THAN_ONE_VLD_ROMAN, "The roman numeral can not contain more than two consecutive symbols: V, L or D");
   fail_unless(ValidateRoman("DD") == MORE_THAN_ONE_VLD_ROMAN, "The roman numeral can not contain more than two consecutive symbols: V, L or D");
   fail_unless(ValidateRoman("XVVIII") == MORE_THAN_ONE_VLD_ROMAN, "The roman numeral can not contain more than two consecutive symbols: V, L or D");
   fail_unless(ValidateRoman("CLLV") == MORE_THAN_ONE_VLD_ROMAN, "The roman numeral can not contain more than two consecutive symbols: V, L or D");
   fail_unless(ValidateRoman("MDDC") == MORE_THAN_ONE_VLD_ROMAN, "The roman numeral can not contain more than two consecutive symbols: V, L or D");
   //
   fail_unless(ValidateRoman("IM") == SYNTAX_ERROR_ROMAN, "The symbols I, V, X, L or D can not be located to the left of symbol M.");
   fail_unless(ValidateRoman("VM") == SYNTAX_ERROR_ROMAN, "The symbols I, V, X, L or D can not be located to the left of symbol M.");
   fail_unless(ValidateRoman("XM") == SYNTAX_ERROR_ROMAN, "The symbols I, V, X, L or D can not be located to the left of symbol M.");
   fail_unless(ValidateRoman("LM") == SYNTAX_ERROR_ROMAN, "The symbols I, V, X, L or D can not be located to the left of symbol M.");
   fail_unless(ValidateRoman("DM") == SYNTAX_ERROR_ROMAN, "The symbols I, V, X, L or D can not be located to the left of symbol M.");
   fail_unless(ValidateRoman("CCCM") == SYNTAX_ERROR_ROMAN, "The symbols C can not be located to the left of symbol M more than once.");
   fail_unless(ValidateRoman("CCM") == SYNTAX_ERROR_ROMAN, "The symbols C can not be located to the left of symbol M more than once.");
   fail_unless(ValidateRoman("CM") == OK, "The symbols C can not be located to the left of symbol M more than once.");
   fail_unless(ValidateRoman("CMM") == SYNTAX_ERROR_ROMAN, "The symbol C can not be located to the left of two or more symbols M.");
   fail_unless(ValidateRoman("CMMM") == SYNTAX_ERROR_ROMAN, "The symbol C can not be located to the left of two or more symbols M.");
   //
   fail_unless(ValidateRoman("ID") == SYNTAX_ERROR_ROMAN, "The symbols I, V, X or L can not be located to the left of symbol D.");
   fail_unless(ValidateRoman("VD") == SYNTAX_ERROR_ROMAN, "The symbols I, V, X or L can not be located to the left of symbol D.");
   fail_unless(ValidateRoman("XD") == SYNTAX_ERROR_ROMAN, "The symbols I, V, X or L can not be located to the left of symbol D.");
   fail_unless(ValidateRoman("LD") == SYNTAX_ERROR_ROMAN, "The symbols I, V, X or L can not be located to the left of symbol D.");
   fail_unless(ValidateRoman("CCCD") == SYNTAX_ERROR_ROMAN, "The symbols C can not be located to the left of symbol D more than once.");
   fail_unless(ValidateRoman("CCD") == SYNTAX_ERROR_ROMAN, "The symbols C can not be located to the left of symbol D more than once.");
   fail_unless(ValidateRoman("CD") == OK, "The symbols C can not be located to the left of symbol D more than once.");
   fail_unless(ValidateRoman("CMD") == SYNTAX_ERROR_ROMAN, "The symbol C can not be located to the left of two symbol with higher value.");
   fail_unless(ValidateRoman("CMMD") == SYNTAX_ERROR_ROMAN, "The symbol C can not be located to the left of two symbol with higher value.");
   fail_unless(ValidateRoman("CMMMD") == SYNTAX_ERROR_ROMAN, "The symbol C can not be located to the left of two symbol with higher value.");
   fail_unless(ValidateRoman("MCD") == OK, "The symbol C can not be located to the left of two symbol with higher value.");
   //
   fail_unless(ValidateRoman("IC") == SYNTAX_ERROR_ROMAN, "The symbols I, V or L can not be located to the left of symbol C.");
   fail_unless(ValidateRoman("VC") == SYNTAX_ERROR_ROMAN, "The symbols I, V or L can not be located to the left of symbol C.");
   fail_unless(ValidateRoman("LC") == SYNTAX_ERROR_ROMAN, "The symbols I, V or L can not be located to the left of symbol C.");
   fail_unless(ValidateRoman("XC") == OK, "The symbols X can not be located to the left of symbol C more than once.");
   fail_unless(ValidateRoman("XXC") == SYNTAX_ERROR_ROMAN, "The symbols X can not be located to the left of symbol C more than once.");
   fail_unless(ValidateRoman("XXXC") == SYNTAX_ERROR_ROMAN, "The symbols X can not be located to the left of symbol C more than once.");
   fail_unless(ValidateRoman("XCC") == SYNTAX_ERROR_ROMAN, "The symbol X can not be located to the left of two or more symbols C.");
   fail_unless(ValidateRoman("XCCC") == SYNTAX_ERROR_ROMAN, "The symbol X can not be located to the left of two or more symbols C.");
   fail_unless(ValidateRoman("CDC") == SYNTAX_ERROR_ROMAN, "The symbol C can not be located to the left and to the rigth of symbol D.");
   fail_unless(ValidateRoman("CMC") == SYNTAX_ERROR_ROMAN, "The symbol C can not be located to the left and to the rigth of symbol M.");
   //
   fail_unless(ValidateRoman("IL") == SYNTAX_ERROR_ROMAN, "The symbols I or V can not be located to the left of symbol L.");
   fail_unless(ValidateRoman("VL") == SYNTAX_ERROR_ROMAN, "The symbols I or V can not be located to the left of symbol L.");
   fail_unless(ValidateRoman("XL") == OK, "The symbols X can not be located to the left of symbol L more than once.");
   fail_unless(ValidateRoman("XXL") == SYNTAX_ERROR_ROMAN, "The symbols X can not be located to the left of symbol L more than once.");
   fail_unless(ValidateRoman("XXXL") == SYNTAX_ERROR_ROMAN, "The symbols X can not be located to the left of symbol L more than once.");
   fail_unless(ValidateRoman("XCLX") == SYNTAX_ERROR_ROMAN, "The symbol X can not be located to the left of two symbol with higher value.");
   fail_unless(ValidateRoman("XCL") == SYNTAX_ERROR_ROMAN, "The symbol X can not be located to the left of two symbol with higher value.");
   //
   fail_unless(ValidateRoman("VX") == SYNTAX_ERROR_ROMAN, "The symbol V can not be located to the left of symbol X.");
   fail_unless(ValidateRoman("IX") == OK, "The symbols I can not be located to the left of symbol X more than once.");
   fail_unless(ValidateRoman("IIX") == SYNTAX_ERROR_ROMAN, "The symbols I can not be located to the left of symbol X more than once.");
   fail_unless(ValidateRoman("IIIX") == SYNTAX_ERROR_ROMAN, "The symbols I can not be located to the left of symbol X more than once.");
   fail_unless(ValidateRoman("IXX") == SYNTAX_ERROR_ROMAN, "The symbol I can not be located to the left of two or more symbols X.");
   fail_unless(ValidateRoman("IXXX") == SYNTAX_ERROR_ROMAN, "The symbol I can not be located to the left of two or more symbols X.");
   fail_unless(ValidateRoman("IIXX") == SYNTAX_ERROR_ROMAN, "The symbol I can not be located to the left of two or more symbols X.");
   fail_unless(ValidateRoman("XLX") == SYNTAX_ERROR_ROMAN, "The symbol X can not be located to the left and to the rigth of symbol L.");
   fail_unless(ValidateRoman("XCX") == SYNTAX_ERROR_ROMAN, "The symbol X can not be located to the left and to the rigth of symbol C.");
   //
   fail_unless(ValidateRoman("IV") == OK, "The symbols I can not be located to the left of symbol V more than once.");
   fail_unless(ValidateRoman("IIV") == SYNTAX_ERROR_ROMAN, "The symbols I can not be located to the left of symbol V more than once.");
   fail_unless(ValidateRoman("IIIV") == SYNTAX_ERROR_ROMAN, "The symbols I can not be located to the left of symbol V more than once.");
   fail_unless(ValidateRoman("IXVI") == SYNTAX_ERROR_ROMAN, "The symbol I can not be located to the left of two symbol with higher value.");
   fail_unless(ValidateRoman("IXV") == SYNTAX_ERROR_ROMAN, "The symbol I can not be located to the left of two symbol with higher value.");
   //
   fail_unless(ValidateRoman("IVI") == SYNTAX_ERROR_ROMAN, "The symbol I can not be located to the left and to the rigth of symbol V.");
   fail_unless(ValidateRoman("IXI") == SYNTAX_ERROR_ROMAN, "The symbol I can not be located to the left and to the rigth of symbol X.");

   //legal syntax
   fail_unless(ValidateRoman("I") == OK, "ilegal syntax in roman numerals");
   fail_unless(ValidateRoman("II") == OK, "ilegal syntax in roman numerals");
   fail_unless(ValidateRoman("III") == OK, "ilegal syntax in roman numerals");
   fail_unless(ValidateRoman("IV") == OK, "ilegal syntax in roman numerals");
   fail_unless(ValidateRoman("VIII") == OK, "ilegal syntax in roman numerals");
   fail_unless(ValidateRoman("XI") == OK, "ilegal syntax in roman numerals");
   fail_unless(ValidateRoman("XIII") == OK, "ilegal syntax in roman numerals");
   fail_unless(ValidateRoman("XIV") == OK, "ilegal syntax in roman numerals");
   fail_unless(ValidateRoman("CMXCIX") == OK, "ilegal syntax in roman numerals");//999
   fail_unless(ValidateRoman("MXXXVIII") == OK, "ilegal syntax in roman numerals");//1038
   fail_unless(ValidateRoman("MDCCCLXXXVIII") == OK, "ilegal syntax in roman numerals");//1888
   fail_unless(ValidateRoman("MCMXCIX") == OK, "ilegal syntax in roman numerals");//1999
   fail_unless(ValidateRoman("MMMDCCCLXXXVIII") == OK, "ilegal syntax in roman numerals");//3888
   fail_unless(ValidateRoman("MMMCMXCIX") == OK, "ilegal syntax in roman numerals");//3999

#test convertouppercasevalidatechar_rn_test
   char num[MAX_LEN] = {""};
   strncpy(num, "mmmdccclxxxviii", MAX_LEN); 
   fail_unless(ConvertUppercaseValidateChar(num) == OK, "Convert uppercase and validate char error"); 
   ck_assert_msg(strcmp(num, "MMMDCCCLXXXVIII")==0, "Error in function ConvertUppercaseValidateChar");


#test addition_rn_test
   int M = MAX_LEN;
   char n1[MAX_LEN] = {""};
   char n2[MAX_LEN] = {""};
   char add[MAX_LEN*2] = {""};
   char *error1 = "Addition of roman numerals fail";
   char *error2 = "Addition of roman numerals fail, out of range";

   //test of some syntax errors, many others were tested previously
   strncpy(n1, "I", M); strncpy(n2, "IIII", M); fail_unless(AddRomanNumerals(n1, n2, add) != OK, error1);
   strncpy(n1, "I", M); strncpy(n2, "XXXX", M); fail_unless(AddRomanNumerals(n1, n2, add) != OK, error1);
   strncpy(n1, "I", M); strncpy(n2, "CCCC", M); fail_unless(AddRomanNumerals(n1, n2, add) != OK, error1);
   //
   strncpy(n1, "III", M); strncpy(n2, "III", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "VI");
   strncpy(n1, "XXX", M); strncpy(n2, "XXX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "LX");
   strncpy(n1, "CCC", M); strncpy(n2, "CCC", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "DC");
   strncpy(n1, "MMM", M); strncpy(n2, "MMM", M); fail_unless(AddRomanNumerals(n1, n2, add) != OK, error2);
   strncpy(n1, "V", M); strncpy(n2, "V", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "X");
   strncpy(n1, "L", M); strncpy(n2, "L", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "C");
   strncpy(n1, "D", M); strncpy(n2, "D", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "M");
   //
   strncpy(n1, "I", M); strncpy(n2, "IX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "X");//1+9
   strncpy(n1, "I", M); strncpy(n2, "XCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "C");//1+99
   strncpy(n1, "I", M); strncpy(n2, "CMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "M");//1+999
   strncpy(n1, "I", M); strncpy(n2, "MCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MM");//1+1999
   strncpy(n1, "I", M); strncpy(n2, "MMCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMM");//1+2999
   strncpy(n1, "I", M); strncpy(n2, "MMMCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) != OK, error2);//1+3999
   //
   strncpy(n1, "V", M); strncpy(n2, "IX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "XIV");//5+9
   strncpy(n1, "V", M); strncpy(n2, "XCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "CIV");//5+99
   strncpy(n1, "V", M); strncpy(n2, "CMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MIV");//5+99
   strncpy(n1, "V", M); strncpy(n2, "MCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMIV");//5+1999
   strncpy(n1, "V", M); strncpy(n2, "MMCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMMIV");//5+2999
   strncpy(n1, "V", M); strncpy(n2, "MMMCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) != OK, error2);//5+3999
   //
   strncpy(n1, "X", M); strncpy(n2, "IX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "XIX");//10+9
   strncpy(n1, "X", M); strncpy(n2, "XCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "CIX");//10+99
   strncpy(n1, "X", M); strncpy(n2, "CMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MIX");//10+999
   strncpy(n1, "X", M); strncpy(n2, "MCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMIX");//10+1999
   strncpy(n1, "X", M); strncpy(n2, "MMCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMMIX");//10+2999
   strncpy(n1, "X", M); strncpy(n2, "MMMCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) != OK, error2);//10+3999
   //
   strncpy(n1, "L", M); strncpy(n2, "IX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "LIX");//50+9
   strncpy(n1, "L", M); strncpy(n2, "XCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "CXLIX");//50+99
   strncpy(n1, "L", M); strncpy(n2, "CMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MXLIX");//50+999
   strncpy(n1, "L", M); strncpy(n2, "MCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMXLIX");//50+1999
   strncpy(n1, "L", M); strncpy(n2, "MMCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMMXLIX");//50+2999
   strncpy(n1, "L", M); strncpy(n2, "MMMCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) != OK, error2);//50+3999
   //
   strncpy(n1, "C", M); strncpy(n2, "IX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "CIX");//100+9
   strncpy(n1, "C", M); strncpy(n2, "XCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "CXCIX");//100+99
   strncpy(n1, "C", M); strncpy(n2, "CMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MXCIX");//100+999
   strncpy(n1, "C", M); strncpy(n2, "MCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMXCIX");//100+1999
   strncpy(n1, "C", M); strncpy(n2, "MMCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMMXCIX");//100+2999
   strncpy(n1, "C", M); strncpy(n2, "MMMCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) != OK, error2);//100+3999
   //
   strncpy(n1, "D", M); strncpy(n2, "IX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "DIX");//500+9
   strncpy(n1, "D", M); strncpy(n2, "XCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "DXCIX");//500+99
   strncpy(n1, "D", M); strncpy(n2, "CMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MCDXCIX");//500+999
   strncpy(n1, "D", M); strncpy(n2, "MCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMCDXCIX");//500+1999
   strncpy(n1, "D", M); strncpy(n2, "MMCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMMCDXCIX");//500+2999
   strncpy(n1, "D", M); strncpy(n2, "MMMCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) != OK, error2);//500+3999
   //
   strncpy(n1, "M", M); strncpy(n2, "IX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MIX");//1000+9
   strncpy(n1, "M", M); strncpy(n2, "XCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MXCIX");//1000+99
   strncpy(n1, "M", M); strncpy(n2, "CMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MCMXCIX");//1000+999
   strncpy(n1, "M", M); strncpy(n2, "MCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMCMXCIX");//1000+1999
   strncpy(n1, "M", M); strncpy(n2, "MMCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMMCMXCIX");//1000+2999
   strncpy(n1, "M", M); strncpy(n2, "MMMCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) != OK, error2);//1000+3999
   //
   strncpy(n1, "IX", M); strncpy(n2, "IX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "XVIII");//9+9
   strncpy(n1, "XCIX", M); strncpy(n2, "XCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "CXCVIII");//99+99
   strncpy(n1, "CMXCIX", M); strncpy(n2, "CMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MCMXCVIII");//999+999
   strncpy(n1, "MCMXCIX", M); strncpy(n2, "MCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMMCMXCVIII");//1999+1999
   strncpy(n1, "MMCMXCIX", M); strncpy(n2, "MMCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) != OK, error1);//2999+2999
   strncpy(n1, "MMMCMXCIX", M); strncpy(n2, "MMMCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) != OK, error2);//3999+3999
   //   
   strncpy(n1, "IV", M); strncpy(n2, "IV", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "VIII");//4+4
   strncpy(n1, "IX", M); strncpy(n2, "IX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "XVIII");//9+9
   strncpy(n1, "XL", M); strncpy(n2, "XL", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "LXXX");//40+40
   strncpy(n1, "XC", M); strncpy(n2, "XC", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "CLXXX");//90+90
   strncpy(n1, "CD", M); strncpy(n2, "CD", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "DCCC");//400+400
   strncpy(n1, "CM", M); strncpy(n2, "CM", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MDCCC");//900+900
   strncpy(n1, "MCDXLIV", M); strncpy(n2, "MMCDXLIV", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMMDCCCLXXXVIII");//1444+2444
   strncpy(n1, "CMXCIX", M); strncpy(n2, "MMCMXCIX", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMMCMXCVIII");//999+2999
   //
   strncpy(n1, "MDCCCLXXXVIII", M); strncpy(n2, "MDCCCLXXXVIII", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMMDCCLXXVI");//1888*2
   strncpy(n1, "MCMXCIX", M); strncpy(n2, "MDCCCLXXXVIII", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMMDCCCLXXXVII");//1999+1888
   strncpy(n1, "MCMXCIX", M); strncpy(n2, "MM", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMMCMXCIX");//1999+2000
   strncpy(n1, "DCCCLXXXVIII", M); strncpy(n2, "MMCCCXLV", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMMCCXXXIII");//888+2345=3233
   strncpy(n1, "MMMCCXLVIII", M); strncpy(n2, "DLXXXIV", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMMDCCCXXXII");//3248+584
   strncpy(n1, "MCCCXLVIII", M); strncpy(n2, "MDCLXXXVII", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMMXXXV");//1348+1687
   strncpy(n1, "mcccxlviii", M); strncpy(n2, "mdclxxxvii", M); fail_unless(AddRomanNumerals(n1, n2, add) == OK, error1); ck_assert_str_eq(add, "MMMXXXV");//1348+1687

#test subtraction_rn_test
   int M = MAX_LEN;
   char n1[MAX_LEN] = {""};
   char n2[MAX_LEN] = {""};
   char sub[MAX_LEN*2] = {""};
   char *error1 = "Subtraction of roman numerals fail";
   //char *error2 = "Subtraction of roman numerals fail, negative number";

   //test of some syntax errors, many others were tested previously
   strncpy(n1, "I", M); strncpy(n2, "VV", M); fail_unless(SubRomanNumerals(n1, n2, sub) != OK, error1);
   strncpy(n1, "I", M); strncpy(n2, "LL", M); fail_unless(SubRomanNumerals(n1, n2, sub) != OK, error1);
   strncpy(n1, "I", M); strncpy(n2, "DD", M); fail_unless(SubRomanNumerals(n1, n2, sub) != OK, error1);
   //

   strncpy(n1, "III", M); strncpy(n2, "III", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_IS_ZERO, error1); ck_assert_str_eq(sub, "");
   strncpy(n1, "XXX", M); strncpy(n2, "XXX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_IS_ZERO, error1); ck_assert_str_eq(sub, "");
   strncpy(n1, "CCC", M); strncpy(n2, "CCC", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_IS_ZERO, error1); ck_assert_str_eq(sub, "");
   strncpy(n1, "MMM", M); strncpy(n2, "MMM", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_IS_ZERO, error1); ck_assert_str_eq(sub, "");
   strncpy(n1, "V", M); strncpy(n2, "V", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_IS_ZERO, error1); ck_assert_str_eq(sub, "");
   strncpy(n1, "L", M); strncpy(n2, "L", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_IS_ZERO, error1); ck_assert_str_eq(sub, "");
   strncpy(n1, "D", M); strncpy(n2, "D", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_IS_ZERO, error1); ck_assert_str_eq(sub, "");
   //
   strncpy(n1, "I", M); strncpy(n2, "IX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //1-9
   strncpy(n1, "I", M); strncpy(n2, "XCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //1-99
   strncpy(n1, "I", M); strncpy(n2, "CMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //1-999
   strncpy(n1, "I", M); strncpy(n2, "MCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //1-1999
   strncpy(n1, "I", M); strncpy(n2, "MMCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //1-2999
   strncpy(n1, "I", M); strncpy(n2, "MMMCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //1-3999
   //
   strncpy(n1, "IX", M); strncpy(n2, "I", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "VIII");//9-1
   strncpy(n1, "XCIX", M); strncpy(n2, "I", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "XCVIII");//99-1
   strncpy(n1, "CMXCIX", M); strncpy(n2, "I", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CMXCVIII");//999-1
   strncpy(n1, "MCMXCIX", M); strncpy(n2, "I", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MCMXCVIII");//1999-1
   strncpy(n1, "MMCMXCIX", M); strncpy(n2, "I", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MMCMXCVIII");//2999-1
   strncpy(n1, "MMMCMXCIX", M); strncpy(n2, "I", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MMMCMXCVIII");//3999-1
   //
   strncpy(n1, "V", M); strncpy(n2, "I", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "IV");//5-1
   strncpy(n1, "X", M); strncpy(n2, "I", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "IX");//10-1
   strncpy(n1, "L", M); strncpy(n2, "I", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "XLIX");//50-1
   strncpy(n1, "C", M); strncpy(n2, "I", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "XCIX");//100-1
   strncpy(n1, "D", M); strncpy(n2, "I", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CDXCIX");//500-1
   strncpy(n1, "M", M); strncpy(n2, "I", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CMXCIX");//1000-1
   strncpy(n1, "MM", M); strncpy(n2, "I", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MCMXCIX");//2000-1
   strncpy(n1, "MMM", M); strncpy(n2, "I", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MMCMXCIX");//3000-1
   //
   strncpy(n1, "V", M); strncpy(n2, "IX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //5-9
   strncpy(n1, "V", M); strncpy(n2, "XCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //5-99
   strncpy(n1, "V", M); strncpy(n2, "CMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //5-999
   strncpy(n1, "V", M); strncpy(n2, "MCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //5-1999
   strncpy(n1, "V", M); strncpy(n2, "MMCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //5-2999
   strncpy(n1, "V", M); strncpy(n2, "MMMCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //5-3999
   //
   strncpy(n1, "IX", M); strncpy(n2, "V", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "IV");//9-5
   strncpy(n1, "XCIX", M); strncpy(n2, "V", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "XCIV");//99-5
   strncpy(n1, "CMXCIX", M); strncpy(n2, "V", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CMXCIV");//999-5
   strncpy(n1, "MCMXCIX", M); strncpy(n2, "V", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MCMXCIV");//1999-5
   strncpy(n1, "MMCMXCIX", M); strncpy(n2, "V", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MMCMXCIV");//2999-5
   strncpy(n1, "MMMCMXCIX", M); strncpy(n2, "V", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MMMCMXCIV");//3999-5
   //
   strncpy(n1, "V", M); strncpy(n2, "V", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_IS_ZERO, error1); ck_assert_str_eq(sub, "");//5-5
   strncpy(n1, "X", M); strncpy(n2, "V", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "V");//10-5
   strncpy(n1, "L", M); strncpy(n2, "V", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "XLV");//50-5
   strncpy(n1, "C", M); strncpy(n2, "V", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "XCV");//100-5
   strncpy(n1, "D", M); strncpy(n2, "V", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CDXCV");//500-5
   strncpy(n1, "M", M); strncpy(n2, "V", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CMXCV");//1000-5
   strncpy(n1, "MM", M); strncpy(n2, "V", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MCMXCV");//2000-5
   strncpy(n1, "MMM", M); strncpy(n2, "V", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MMCMXCV");//3000-5
   //
   strncpy(n1, "X", M); strncpy(n2, "IX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "I"); //10-9
   strncpy(n1, "X", M); strncpy(n2, "XCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //10-99
   strncpy(n1, "X", M); strncpy(n2, "CMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //10-999
   strncpy(n1, "X", M); strncpy(n2, "MCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //10-1999
   strncpy(n1, "X", M); strncpy(n2, "MMCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //10-2999
   strncpy(n1, "X", M); strncpy(n2, "MMMCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //10-3999
   //
   strncpy(n1, "IX", M); strncpy(n2, "X", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //9-10
   strncpy(n1, "XCIX", M); strncpy(n2, "X", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "LXXXIX"); //99-10
   strncpy(n1, "CMXCIX", M); strncpy(n2, "X", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CMLXXXIX"); //999-10
   strncpy(n1, "MCMXCIX", M); strncpy(n2, "X", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MCMLXXXIX"); //1999-10
   strncpy(n1, "MMCMXCIX", M); strncpy(n2, "X", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MMCMLXXXIX"); //2999-10
   strncpy(n1, "MMMCMXCIX", M); strncpy(n2, "X", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MMMCMLXXXIX"); //3999-10
   //
   strncpy(n1, "V", M); strncpy(n2, "X", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //5-10
   strncpy(n1, "X", M); strncpy(n2, "X", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_IS_ZERO, error1); ck_assert_str_eq(sub, ""); //10-10
   strncpy(n1, "L", M); strncpy(n2, "X", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "XL"); //50-10
   strncpy(n1, "C", M); strncpy(n2, "X", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "XC"); //100-10
   strncpy(n1, "D", M); strncpy(n2, "X", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CDXC"); //500-10
   strncpy(n1, "M", M); strncpy(n2, "X", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CMXC"); //1000-10
   strncpy(n1, "MM", M); strncpy(n2, "X", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MCMXC"); //2000-10
   strncpy(n1, "MMM", M); strncpy(n2, "X", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MMCMXC"); //3000-10
   //
   strncpy(n1, "L", M); strncpy(n2, "IX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "XLI"); //50-9
   strncpy(n1, "L", M); strncpy(n2, "XCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //50-99
   strncpy(n1, "L", M); strncpy(n2, "CMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //50-999
   strncpy(n1, "L", M); strncpy(n2, "MCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //50-1999
   strncpy(n1, "L", M); strncpy(n2, "MMCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //50-2999
   strncpy(n1, "L", M); strncpy(n2, "MMMCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //50-3999
   //
   strncpy(n1, "IX", M); strncpy(n2, "L", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //9-50
   strncpy(n1, "XCIX", M); strncpy(n2, "L", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "XLIX"); //99-50
   strncpy(n1, "CMXCIX", M); strncpy(n2, "L", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CMXLIX"); //999-50
   strncpy(n1, "MCMXCIX", M); strncpy(n2, "L", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MCMXLIX"); //1999-50
   strncpy(n1, "MMCMXCIX", M); strncpy(n2, "L", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MMCMXLIX"); //2999-50
   strncpy(n1, "MMMCMXCIX", M); strncpy(n2, "L", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MMMCMXLIX"); //3999-50
   //
   strncpy(n1, "V", M); strncpy(n2, "L", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //5-50
   strncpy(n1, "X", M); strncpy(n2, "L", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //10-50
   strncpy(n1, "L", M); strncpy(n2, "L", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_IS_ZERO, error1); ck_assert_str_eq(sub, ""); //50-50
   strncpy(n1, "C", M); strncpy(n2, "L", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "L"); //100-50
   strncpy(n1, "D", M); strncpy(n2, "L", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CDL"); //500-50
   strncpy(n1, "M", M); strncpy(n2, "L", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CML"); //1000-50
   strncpy(n1, "MM", M); strncpy(n2, "L", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MCML"); //2000-50
   strncpy(n1, "MMM", M); strncpy(n2, "L", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MMCML"); //3000-50
   //
   strncpy(n1, "C", M); strncpy(n2, "IX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "XCI"); //100-9
   strncpy(n1, "C", M); strncpy(n2, "XCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "I"); //100-99
   strncpy(n1, "C", M); strncpy(n2, "CMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //100-999
   strncpy(n1, "C", M); strncpy(n2, "MCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //100-1999
   strncpy(n1, "C", M); strncpy(n2, "MMCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //100-2999
   strncpy(n1, "C", M); strncpy(n2, "MMMCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //100-3999
   //
   strncpy(n1, "IX", M); strncpy(n2, "C", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //9-100
   strncpy(n1, "XCIX", M); strncpy(n2, "C", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //99-100
   strncpy(n1, "CMXCIX", M); strncpy(n2, "C", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "DCCCXCIX"); //999-100
   strncpy(n1, "MCMXCIX", M); strncpy(n2, "C", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MDCCCXCIX"); //1999-100
   strncpy(n1, "MMCMXCIX", M); strncpy(n2, "C", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MMDCCCXCIX"); //2999-100
   strncpy(n1, "MMMCMXCIX", M); strncpy(n2, "C", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MMMDCCCXCIX"); //3999-100
   //
   strncpy(n1, "V", M); strncpy(n2, "C", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //5-100
   strncpy(n1, "X", M); strncpy(n2, "C", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //10-100
   strncpy(n1, "L", M); strncpy(n2, "C", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //50-100
   strncpy(n1, "C", M); strncpy(n2, "C", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_IS_ZERO, error1); ck_assert_str_eq(sub, ""); //100-100
   strncpy(n1, "D", M); strncpy(n2, "C", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CD"); //500-100
   strncpy(n1, "M", M); strncpy(n2, "C", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CM"); //1000-100
   strncpy(n1, "MM", M); strncpy(n2, "C", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MCM"); //2000-100
   strncpy(n1, "MMM", M); strncpy(n2, "C", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MMCM"); //3000-100
   //
   strncpy(n1, "D", M); strncpy(n2, "IX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CDXCI"); //500-9
   strncpy(n1, "D", M); strncpy(n2, "XCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CDI"); //500-99
   strncpy(n1, "D", M); strncpy(n2, "CMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //500-999
   strncpy(n1, "D", M); strncpy(n2, "MCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //500-1999
   strncpy(n1, "D", M); strncpy(n2, "MMCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //500-2999
   strncpy(n1, "D", M); strncpy(n2, "MMMCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //500-3999
   //
   strncpy(n1, "IX", M); strncpy(n2, "D", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //9-500
   strncpy(n1, "XCIX", M); strncpy(n2, "D", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //99-500
   strncpy(n1, "CMXCIX", M); strncpy(n2, "D", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CDXCIX"); //999-500
   strncpy(n1, "MCMXCIX", M); strncpy(n2, "D", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MCDXCIX"); //1999-500
   strncpy(n1, "MMCMXCIX", M); strncpy(n2, "D", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MMCDXCIX"); //2999-500
   strncpy(n1, "MMMCMXCIX", M); strncpy(n2, "D", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MMMCDXCIX"); //3999-500
   //
   strncpy(n1, "V", M); strncpy(n2, "D", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //5-500
   strncpy(n1, "X", M); strncpy(n2, "D", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //10-500
   strncpy(n1, "L", M); strncpy(n2, "D", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //50-500
   strncpy(n1, "C", M); strncpy(n2, "D", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //100-500
   strncpy(n1, "D", M); strncpy(n2, "D", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_IS_ZERO, error1); ck_assert_str_eq(sub, ""); //500-500
   strncpy(n1, "M", M); strncpy(n2, "D", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "D"); //1000-500
   strncpy(n1, "MM", M); strncpy(n2, "D", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MD"); //2000-500
   strncpy(n1, "MMM", M); strncpy(n2, "D", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MMD"); //3000-500
   //
   strncpy(n1, "M", M); strncpy(n2, "IX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CMXCI"); //1000-9
   strncpy(n1, "M", M); strncpy(n2, "XCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CMI"); //1000-99
   strncpy(n1, "M", M); strncpy(n2, "CMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "I"); //1000-999
   strncpy(n1, "M", M); strncpy(n2, "MCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //1000-1999
   strncpy(n1, "M", M); strncpy(n2, "MMCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //1000-2999
   strncpy(n1, "M", M); strncpy(n2, "MMMCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //1000-3999
   //
   strncpy(n1, "IX", M); strncpy(n2, "M", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //9-1000
   strncpy(n1, "XCIX", M); strncpy(n2, "M", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //99-1000
   strncpy(n1, "CMXCIX", M); strncpy(n2, "M", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //999-1000
   strncpy(n1, "MCMXCIX", M); strncpy(n2, "M", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CMXCIX"); //1999-1000
   strncpy(n1, "MMCMXCIX", M); strncpy(n2, "M", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MCMXCIX"); //2999-1000
   strncpy(n1, "MMMCMXCIX", M); strncpy(n2, "M", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MMCMXCIX"); //3999-1000
   //
   strncpy(n1, "V", M); strncpy(n2, "M", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //5-1000
   strncpy(n1, "X", M); strncpy(n2, "M", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //10-1000
   strncpy(n1, "L", M); strncpy(n2, "M", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //50-1000
   strncpy(n1, "C", M); strncpy(n2, "M", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //100-1000
   strncpy(n1, "D", M); strncpy(n2, "M", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_NOT_POSSIBLE, error1); //500-1000
   strncpy(n1, "M", M); strncpy(n2, "M", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_IS_ZERO, error1); ck_assert_str_eq(sub, ""); //1000-1000
   strncpy(n1, "MM", M); strncpy(n2, "M", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "M"); //2000-1000
   strncpy(n1, "MMM", M); strncpy(n2, "M", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MM"); //3000-1000
   //
   strncpy(n1, "IX", M); strncpy(n2, "IX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_IS_ZERO, error1); ck_assert_str_eq(sub, ""); //9-9
   strncpy(n1, "XCIX", M); strncpy(n2, "XCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_IS_ZERO, error1); ck_assert_str_eq(sub, ""); //99-99
   strncpy(n1, "CMXCIX", M); strncpy(n2, "CMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_IS_ZERO, error1); ck_assert_str_eq(sub, ""); //999-999
   strncpy(n1, "MCMXCIX", M); strncpy(n2, "MCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_IS_ZERO, error1); ck_assert_str_eq(sub, ""); //1999-1999
   strncpy(n1, "MMCMXCIX", M); strncpy(n2, "MMCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_IS_ZERO, error1); ck_assert_str_eq(sub, ""); //2999-2999
   strncpy(n1, "MMMCMXCIX", M); strncpy(n2, "MMMCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == SUBTRACTION_IS_ZERO, error1); ck_assert_str_eq(sub, ""); //3999-3999
   //   
   strncpy(n1, "IX", M); strncpy(n2, "IV", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "V"); //9-4
   strncpy(n1, "XL", M); strncpy(n2, "IX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "XXXI"); //40-9
   strncpy(n1, "XC", M); strncpy(n2, "XL", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "L"); //90-40
   strncpy(n1, "CD", M); strncpy(n2, "XC", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CCCX"); //400-90
   strncpy(n1, "CM", M); strncpy(n2, "CD", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "D"); //900-400
   strncpy(n1, "MCDXLIV", M); strncpy(n2, "CM", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "DXLIV"); //1444-900
   strncpy(n1, "MMCDXLIV", M); strncpy(n2, "MCDXLIV", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "M"); //2444-1444
   strncpy(n1, "MMCMXCIX", M); strncpy(n2, "CMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MM"); //2999-999
   //
   strncpy(n1, "MM", M); strncpy(n2, "CXII", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MDCCCLXXXVIII"); //2000-112
   strncpy(n1, "MCMXCIX", M); strncpy(n2, "MDCCCLXXXVIII", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CXI"); //1999-1888
   strncpy(n1, "MMMCMXCIX", M); strncpy(n2, "MCMXCIX", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MM"); //3999-1999
   strncpy(n1, "MMCCCXLV", M); strncpy(n2, "DCCCLXXXVIII", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MCDLVII"); //2345-888=1457
   strncpy(n1, "MMMCCXLVIII", M); strncpy(n2, "DLXXXIV", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "MMDCLXIV"); //3248-584=2664
   strncpy(n1, "MDCLXXXVII", M); strncpy(n2, "MCCCXLVIII", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CCCXXXIX"); //1687-1348=339
   strncpy(n1, "mdclxxxvii", M); strncpy(n2, "mcccxlviii", M); fail_unless(SubRomanNumerals(n1, n2, sub) == OK, error1); ck_assert_str_eq(sub, "CCCXXXIX"); //1687-1348=339





      



